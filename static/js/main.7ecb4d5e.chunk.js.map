{"version":3,"sources":["Components/SendForm/SendForm.module.css","Components/ResultingDistance/ResultingDistance.module.css","Components/LoadingProcess/LoadingProcess.module.css","assets/pointer.svg","Components/YandexMap/YandexMap.tsx","api/api.ts","redux/map-reducer.ts","Components/SendForm/Snackbar/Snackbar.tsx","Components/SendForm/SendForm.tsx","Components/SearchTable/SearchTable.tsx","Components/ResultingDistance/ResultingDistance.tsx","redux/map-selectors.ts","Components/LoadingProcess/LoadingProcess.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx","Components/YandexMap/YandexMap.module.css","Components/SearchTable/SearchTable.module.css"],"names":["module","exports","YandexMap","React","memo","getMapCoordinates","pointList","center","zoom","className","s","yandexMap","Map","onDblClick","e","state","options","position","right","top","left","map","obj","geometry","latitude","longitude","modules","properties","hintContent","address","balloonContent","lastPointDistance","iconLayout","iconImageHref","pointer","iconImageSize","iconImageOffset","yandexInstance","axios","create","baseURL","pointsYandexAPI","get","interceptors","request","use","config","a","params","apikey","format","error","Promise","reject","googleInstance","pointsGoogleAPI","previousCoordinates","initialState","actions","newObject","type","Alert","props","elevation","variant","useStyles","makeStyles","theme","root","width","marginTop","spacing","SnackbarMessage","message","classes","useState","open","setOpen","useEffect","handleClose","event","reason","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","SendForm","currentPoint","setIsLoadingProcess","setPreviousCoordinates","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","newPoint","editPoint","geocodeData","data","response","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","Address","formatted","distanceData","distance","rows","elements","text","console","warn","geocodeNewPoint","setTimeout","textField","id","name","label","value","TextField","margin","fullWidth","onChange","handleChange","sendForm","handleSubmit","noValidate","Button","color","SearchTable","useSelector","mapPage","historyTable","style","height","columns","TEST","pageSize","field","align","headerName","ResultingDistance","resultingDistance","reduce","result","currentObj","Number","replace","includes","toFixed","pointListSelector","LoadingProcess","CircularProgress","loadingProcess","App","setCurrentPoint","setCenter","setZoom","isLoadingProcess","pointFind","find","getMapPointCoordinates","useCallback","preventDefault","getCenter","getZoom","newPointCoordinates","v1","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ecb4d5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sendForm\":\"SendForm_sendForm__15Va5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultingDistance\":\"ResultingDistance_resultingDistance__3eXpO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingProcess\":\"LoadingProcess_loadingProcess__2lJVp\"};","export default __webpack_public_path__ + \"static/media/pointer.8c1cae95.svg\";","import React from 'react';\r\nimport s from './YandexMap.module.css'\r\nimport {Map, Placemark, RulerControl, TypeSelector, YMaps, ZoomControl} from 'react-yandex-maps';\r\nimport {PointType} from '../../redux/map-reducer';\r\nimport pointer from './../../assets/pointer.svg';\r\nimport {CoordinatesType} from '../../App';\r\n\r\ntype YandexMapPorpsType = {\r\n  getMapCoordinates: (e: any) => void\r\n  pointList: Array<PointType>\r\n  center: CoordinatesType\r\n  zoom: number\r\n  setIsLoadingProcess: (isLoadingProcess: boolean) => void\r\n}\r\n\r\nexport const YandexMap = React.memo(\r\n  ({getMapCoordinates, pointList, center, zoom}: YandexMapPorpsType) => {\r\n\r\n  return (\r\n    <div className={s.yandexMap}>\r\n      <YMaps>\r\n        <div>\r\n          <Map className={s.Map}\r\n               onDblClick={(e: any) => {\r\n                 getMapCoordinates(e)\r\n               }}\r\n               state={{center, zoom: zoom}}>\r\n            <ZoomControl options={{position: {right: 10, top: 10}}}/>\r\n            <TypeSelector options={{position: {left: 10, top: 10}}}/>\r\n            <RulerControl options={{position: {right: 50, top: 10}}}/>\r\n            {pointList.map((obj: PointType) => <Placemark\r\n                geometry={[+obj.latitude, +obj.longitude]}\r\n                modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n                properties={{hintContent: obj.address, balloonContent: obj.lastPointDistance,}}\r\n                options={{\r\n                  iconLayout: 'default#image',\r\n                  iconImageHref: pointer,\r\n                  iconImageSize: [100, 100],\r\n                  iconImageOffset: [0, -100],\r\n                }}\r\n              />\r\n            )}\r\n          </Map>\r\n        </div>\r\n      </YMaps>\r\n    </div>\r\n  )\r\n})\r\n","import axios from 'axios';\r\nimport {PreviousCoordinatesType} from '../App';\r\n\r\nconst yandexInstance = axios.create({\r\n  baseURL: 'https://geocode-maps.yandex.ru/1.x/',\r\n});\r\n\r\nexport const pointsYandexAPI = {\r\n  geocodeNewObject(latitude: string, longitude: string) {\r\n    return yandexInstance.get(`?geocode=${longitude},${latitude}`);\r\n  },\r\n}\r\n\r\nexport const setYandexInterceptors = (instance: any) => {\r\n  instance.interceptors.request.use(\r\n    async (config: any) => {\r\n      const apiKey = '62863b39-ff46-4e0f-a09b-34ed4079f28a'\r\n      const format = 'json'\r\n      config.params = {...config.params, apikey: apiKey, format: format}\r\n      return config;\r\n    },\r\n    (error: any) => Promise.reject(error)\r\n  );\r\n}\r\n\r\nsetYandexInterceptors(yandexInstance)\r\n\r\nconst googleInstance = axios.create({\r\n  baseURL: 'https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/distancematrix/',\r\n});\r\n\r\nexport const pointsGoogleAPI = {\r\n  getDistance(latitude: string, longitude: string, previousCoordinates: PreviousCoordinatesType) {\r\n    return googleInstance.get(`json?origins=${latitude},${longitude}&destinations=${previousCoordinates[0]},${previousCoordinates[1]}&key=AIzaSyDZYmugNtrfSskRFo0Wa3QYPRva1AeiuwU`);\r\n  }\r\n}\r\n\r\n","import {InferActionsTypes} from './redux-store';\r\nimport {Dispatch} from 'react';\r\nimport {pointsGoogleAPI, pointsYandexAPI} from '../api/api';\r\nimport {PreviousCoordinatesType} from '../App';\r\n\r\n\r\nexport type PointType = {\r\n  id: string,\r\n  latitude: string,\r\n  longitude: string,\r\n  address?: string,\r\n  lastPointDistance?: string\r\n}\r\n\r\ntype MapReducerType = {\r\n  pointList: Array<PointType>\r\n};\r\n\r\nlet initialState: MapReducerType = {\r\n  pointList: []\r\n};\r\n\r\nexport const mapReducer = (state = initialState, action: ActionType): MapReducerType => {\r\n\r\n  switch (action.type) {\r\n    case 'MAP-REDUCER/ADD_OBJECT': {\r\n      return {...state, pointList: [...state.pointList, action.newObject]}\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ntype ActionType = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  addPoint: (newObject: PointType) => ({type: 'MAP-REDUCER/ADD_OBJECT', newObject} as const),\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionType>;\r\n\r\nexport const geocodeNewPoint = (newPoint: PointType, previousCoordinates: PreviousCoordinatesType) => {\r\n  return async (dispatch: DispatchType) => {\r\n\r\n    const editPoint = {...newPoint}\r\n    try {\r\n      const geocodeData = await pointsYandexAPI.geocodeNewObject(newPoint.latitude, newPoint.longitude);\r\n      editPoint.address = geocodeData.data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.Address.formatted;\r\n\r\n\r\n        const distanceData = await pointsGoogleAPI.getDistance(newPoint.latitude, newPoint.longitude, previousCoordinates);\r\n        const distance = distanceData?.data?.rows[0]?.elements[0]?.distance?.text;\r\n        // const distance = 'stub'\r\n        if (distance) {\r\n          editPoint.lastPointDistance = distance;\r\n        }\r\n\r\n      dispatch(actions.addPoint(editPoint));\r\n    } catch (err) {\r\n      console.warn('geocodeNewPoint err :', err)\r\n    }\r\n  }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\n\r\nconst Alert = (props: AlertProps) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {width: '100%', '& > * + *': {marginTop: theme.spacing(2),},},\r\n}));\r\n\r\ntype SnackbarMessagePropsType = {\r\n  message: string | undefined\r\n}\r\n\r\nexport const SnackbarMessage = ({message}: SnackbarMessagePropsType) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    setOpen(true);\r\n  }, [message])\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {message\r\n        ? <Snackbar open={open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}>\r\n          <Alert onClose={handleClose} severity=\"success\">\r\n            {message}\r\n          </Alert>\r\n        </Snackbar>\r\n        : <></>}\r\n    </div>\r\n  );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport s from './SendForm.module.css';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch} from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from '@material-ui/core';\r\nimport {geocodeNewPoint, PointType} from '../../redux/map-reducer';\r\nimport {SnackbarMessage} from './Snackbar/Snackbar';\r\nimport {PreviousCoordinatesType} from '../../App';\r\n\r\ntype SendFormPropsType = {\r\n  currentPoint: PointType\r\n  setIsLoadingProcess: (isLoadingProcess: boolean) => void\r\n  previousCoordinates: PreviousCoordinatesType\r\n  setPreviousCoordinates: (previousCoordinates: PreviousCoordinatesType) => void\r\n}\r\n\r\nexport const SendForm = React.memo(({currentPoint, setIsLoadingProcess, previousCoordinates, setPreviousCoordinates}: SendFormPropsType) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    setIsLoadingProcess(false)\r\n  }, [currentPoint])\r\n\r\n  const formik: any = useFormik({\r\n    initialValues: {\r\n      latitude: currentPoint.latitude,\r\n      longitude: currentPoint.longitude,\r\n      address: currentPoint.address\r\n    },\r\n    onSubmit: () => {\r\n      dispatch(geocodeNewPoint(currentPoint, previousCoordinates));\r\n      setPreviousCoordinates([currentPoint.latitude, currentPoint.longitude])\r\n      setIsLoadingProcess(true)\r\n      setTimeout(()=>{\r\n        setIsLoadingProcess(false)\r\n      }, 3000)\r\n    },\r\n  });\r\n\r\n  const textField = (id: string, name: string, label: string, value: string | undefined) => {\r\n    return (\r\n      <TextField\r\n        variant='outlined'\r\n        margin='normal'\r\n        fullWidth\r\n        id={id}\r\n        type='text'\r\n        name={name}\r\n        label={label}\r\n        onChange={formik.handleChange}\r\n        value={value}\r\n      />)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SnackbarMessage message={currentPoint.address}/>\r\n      <div className={s.sendForm}>\r\n        <form onSubmit={formik.handleSubmit}\r\n              noValidate>\r\n          {textField('latitude', 'latitude', 'Latitude', currentPoint.latitude)}\r\n          {textField('longitude', 'longitude', 'Latitude', currentPoint.longitude)}\r\n          {textField('address', 'address', '', currentPoint.address)}\r\n          <Button\r\n            type='submit'\r\n            fullWidth\r\n            variant='contained'\r\n            color='primary'\r\n          >\r\n            Geocode\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  )\r\n});","import React from 'react';\r\nimport s from './SearchTable.module.css'\r\nimport {ColDef, DataGrid} from '@material-ui/data-grid';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {PointType} from '../../redux/map-reducer';\r\n\r\nexport const SearchTable = () => {\r\n\r\n  const rows = useSelector<AppStateType, Array<PointType>>(state => state.mapPage.pointList);\r\n  return (\r\n    <div className={s.historyTable}>\r\n      <div style={{height: 400, width: '100%'}}>\r\n        <DataGrid rows={rows} columns={columns} className={s.TEST} pageSize={5}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst columns: ColDef[] = [\r\n  {field: 'latitude', align: 'center', headerName: 'Latitude', type: 'number', width: 180},\r\n  {field: 'longitude', align: 'center', headerName: 'Longitude', type: 'number', width: 180},\r\n  {field: 'address', align: 'center', headerName: 'Address', type: 'string', width: 450},\r\n  {field: 'lastPointDistance', align: 'center', headerName: 'Distance', type: 'string', width: 110},\r\n];\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {PointType} from '../../redux/map-reducer';\r\nimport s from './ResultingDistance.module.css';\r\n\r\nexport const ResultingDistance = () => {\r\n  const displayObjects = useSelector<AppStateType, Array<PointType>>(state => state.mapPage.pointList);\r\n\r\n  const resultingDistance = displayObjects.reduce(function (result: number, currentObj: PointType) {\r\n    let distance: number = 0;\r\n    if (currentObj.lastPointDistance) {\r\n      distance = Number(currentObj.lastPointDistance.replace(/,/, '.').replace(/[^0-9\\.-]+/g, \"\"))\r\n\r\n      if (currentObj.lastPointDistance.includes('км') || currentObj.lastPointDistance.includes('km')) {\r\n        return result + distance;\r\n      }\r\n      if (currentObj.lastPointDistance.includes('м') || currentObj.lastPointDistance.includes('m')) {\r\n        return result + distance / 1000;\r\n      }\r\n    }\r\n    return result + distance;\r\n  }, 0);\r\n\r\n  return (\r\n    <div className={s.resultingDistance}>\r\n      Resulting distance {resultingDistance.toFixed(3)} км\r\n    </div>\r\n  );\r\n}\r\n\r\n","import {AppStateType} from './redux-store';\r\n\r\nexport const  pointListSelector = (state: AppStateType) => state.mapPage.pointList","import React from 'react';\r\nimport s from './LoadingProcess.module.css';\r\nimport {CircularProgress} from '@material-ui/core';\r\n\r\nexport const LoadingProcess = () => {\r\n\r\n  return (\r\n    <CircularProgress className={s.loadingProcess}/>\r\n  );\r\n}\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\nimport './App.css';\nimport {YandexMap} from './Components/YandexMap/YandexMap';\nimport {SendForm} from './Components/SendForm/SendForm';\nimport {SearchTable} from './Components/SearchTable/SearchTable';\nimport {PointType} from './redux/map-reducer';\nimport {v1} from 'uuid';\nimport {useSelector} from 'react-redux';\nimport {ResultingDistance} from './Components/ResultingDistance/ResultingDistance';\nimport {pointListSelector} from './redux/map-selectors';\nimport {CircularProgress} from '@material-ui/core';\nimport {LoadingProcess} from './Components/LoadingProcess/LoadingProcess';\n\nexport type CoordinatesType = [number, number];\nexport type PreviousCoordinatesType = [string, string];\n\nconst App = () => {\n\n    const [currentPoint, setCurrentPoint] = useState<PointType>({id: '', latitude: '', longitude: '', address: ''});\n    const [center, setCenter] = useState<CoordinatesType>([53.91046755609704, 27.5616049442719]);\n    const [zoom, setZoom] = useState<number>(18);\n    const [isLoadingProcess, setIsLoadingProcess] = useState<boolean>(false);\n    const pointList = useSelector(pointListSelector);\n\n  const initialArr: PreviousCoordinatesType = ['', '']\n  let [previousCoordinates, setPreviousCoordinates] = useState<PreviousCoordinatesType>(initialArr)\n\n    useEffect(() => {\n      const pointFind = pointList.find(obj => obj.id === currentPoint.id)\n      pointFind && setCurrentPoint(pointFind)\n      setIsLoadingProcess(false)\n    }, [pointList])\n\n    const getMapPointCoordinates = useCallback((e: any) => {\n      e.preventDefault();\n      setCurrentPoint({id: '', latitude: '', longitude: '', address: ''});\n      setCenter(e.get('target').getCenter());\n      setZoom(e.get('target').getZoom());\n\n      let newPointCoordinates = e.get('coords');\n      const newPoint: PointType = {\n        id: v1(),\n        latitude: newPointCoordinates[0].toString(),\n        longitude: newPointCoordinates[1].toString()\n      }\n      setCurrentPoint(newPoint);\n    }, [])\n\n    return (\n      <div className='app'>\n        {isLoadingProcess\n          ? <LoadingProcess/>\n          : <>\n            <div>\n              <YandexMap\n                getMapCoordinates={getMapPointCoordinates} pointList={pointList} center={center}\n                zoom={zoom} setIsLoadingProcess={setIsLoadingProcess}\n              />\n            </div>\n            <div className='infoBar'>\n              <SendForm\n                previousCoordinates={previousCoordinates}\n              setPreviousCoordinates={setPreviousCoordinates}\n                currentPoint={currentPoint}\n                setIsLoadingProcess={setIsLoadingProcess}/>\n              <SearchTable/>\n              <ResultingDistance/>\n            </div>\n          </>\n        }\n      </div>\n    );\n  }\n;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware } from \"redux\";\r\nimport { combineReducers, createStore } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {mapReducer} from './map-reducer';\r\n\r\nconst reducers = combineReducers({\r\n  mapPage: mapReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\n\r\nexport type InferActionsTypes<T extends { [key: string]: (...arg: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nconst store: ReturnType<typeof createStore> = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from './redux/redux-store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"yandexMap\":\"YandexMap_yandexMap__Q1MUo\",\"Map\":\"YandexMap_Map__1wL9U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"historyTable\":\"SearchTable_historyTable__O3zNU\"};"],"sourceRoot":""}